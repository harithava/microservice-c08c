{"ast":null,"code":"var _jsxFileName = \"/Users/hariharan.thavachelvam/Documents/Sandbox/workspace/My Learning/Chapter-08a/challenges-frontend/src/components/LeaderBoardComponent.js\";\nimport * as React from 'react';\nimport GameApiClient from '../services/GameApiClient';\nimport ChallengesApiClient from '../services/ChallengesApiClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LeaderBoardComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      leaderboard: [],\n      serverError: false\n    };\n  }\n  componentDidMount() {\n    this.refreshLeaderBoard();\n    // sets a timer to refresh the leaderboard every 5 seconds\n    setInterval(this.refreshLeaderBoard.bind(this), 5000);\n  }\n  getLeaderBoardData() {\n    return GameApiClient.leaderBoard().then(lbRes => {\n      if (lbRes.ok) {\n        return lbRes.json();\n      } else {\n        return Promise.reject(\"Gamification: error response\");\n      }\n    });\n  }\n  getUserAliasData(userIds) {\n    return ChallengesApiClient.getUsers(userIds).then(usRes => {\n      if (usRes.ok) {\n        return usRes.json();\n      } else {\n        return Promise.reject(\"Multiplication: error response\");\n      }\n    });\n  }\n  updateLeaderBoard(lb) {\n    this.setState({\n      leaderboard: lb,\n      // reset the flag\n      serverError: false\n    });\n  }\n  refreshLeaderBoard() {\n    this.getLeaderBoardData().then(lbData => {\n      let userIds = lbData.map(row => row.userId);\n      if (userIds.length > 0) {\n        this.getUserAliasData(userIds).then(data => {\n          // build a map of id -> alias\n          let userMap = new Map();\n          data.forEach(idAlias => {\n            userMap.set(idAlias.id, idAlias.alias);\n          });\n          // add a property to existing lb data\n          lbData.forEach(row => row['alias'] = userMap.get(row.userId));\n          this.updateLeaderBoard(lbData);\n        }).catch(reason => {\n          console.log('Error mapping user ids', reason);\n          this.updateLeaderBoard(lbData);\n        });\n      }\n    }).catch(reason => {\n      this.setState({\n        serverError: true\n      });\n      console.log('Gamification server error', reason);\n    });\n  }\n  render() {\n    if (this.state.serverError) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"We're sorry, but we can't display game statistics at this moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Leaderboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Badges\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.state.leaderboard.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.alias ? row.alias : row.userId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.totalScore\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.badges.map(b => /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"badge\",\n                children: b\n              }, b, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 34\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 25\n            }, this)]\n          }, row.userId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 56\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default LeaderBoardComponent;","map":{"version":3,"names":["React","GameApiClient","ChallengesApiClient","jsxDEV","_jsxDEV","LeaderBoardComponent","Component","constructor","props","state","leaderboard","serverError","componentDidMount","refreshLeaderBoard","setInterval","bind","getLeaderBoardData","leaderBoard","then","lbRes","ok","json","Promise","reject","getUserAliasData","userIds","getUsers","usRes","updateLeaderBoard","lb","setState","lbData","map","row","userId","length","data","userMap","Map","forEach","idAlias","set","id","alias","get","catch","reason","console","log","render","children","fileName","_jsxFileName","lineNumber","columnNumber","totalScore","badges","b","className"],"sources":["/Users/hariharan.thavachelvam/Documents/Sandbox/workspace/My Learning/Chapter-08a/challenges-frontend/src/components/LeaderBoardComponent.js"],"sourcesContent":["import * as React from 'react';\nimport GameApiClient from '../services/GameApiClient';\nimport ChallengesApiClient from '../services/ChallengesApiClient';\n\nclass LeaderBoardComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            leaderboard: [],\n            serverError: false\n        }\n    }\n\n    componentDidMount() {\n        this.refreshLeaderBoard();\n        // sets a timer to refresh the leaderboard every 5 seconds\n        setInterval(this.refreshLeaderBoard.bind(this), 5000);\n    }\n\n    getLeaderBoardData(): Promise {\n        return GameApiClient.leaderBoard().then(\n            lbRes => {\n                if (lbRes.ok) {\n                    return lbRes.json();\n                } else {\n                    return Promise.reject(\"Gamification: error response\");\n                }\n            }\n        );\n    }\n\n    getUserAliasData(userIds: number[]): Promise {\n        return ChallengesApiClient.getUsers(userIds).then(\n            usRes => {\n                if(usRes.ok) {\n                    return usRes.json();\n                } else {\n                    return Promise.reject(\"Multiplication: error response\");\n                }\n            }\n        )\n    }\n\n    updateLeaderBoard(lb) {\n        this.setState({\n            leaderboard: lb,\n            // reset the flag\n            serverError: false\n        });\n    }\n\n    refreshLeaderBoard() {\n        this.getLeaderBoardData().then(\n            lbData => {\n                let userIds = lbData.map(row => row.userId);\n                if(userIds.length > 0) {\n                    this.getUserAliasData(userIds).then(data => {\n                        // build a map of id -> alias\n                        let userMap = new Map();\n                        data.forEach(idAlias => {\n                            userMap.set(idAlias.id, idAlias.alias);\n                        });\n                        // add a property to existing lb data\n                        lbData.forEach(row =>\n                            row['alias'] = userMap.get(row.userId)\n                        );\n                        this.updateLeaderBoard(lbData);\n                    }).catch(reason => {\n                        console.log('Error mapping user ids', reason);\n                        this.updateLeaderBoard(lbData);\n                    });\n                }\n            }\n        ).catch(reason => {\n            this.setState({ serverError: true });\n            console.log('Gamification server error', reason);\n        });\n    }\n\n    render() {\n        if (this.state.serverError) {\n            return (\n                <div>We're sorry, but we can't display game statistics at this\n                    moment.</div>\n            );\n        }\n        return (\n            <div>\n                <h3>Leaderboard</h3>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>User</th>\n                        <th>Score</th>\n                        <th>Badges</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.leaderboard.map(row => <tr key={row.userId}>\n                        <td>{row.alias ? row.alias : row.userId}</td>\n                        <td>{row.totalScore}</td>\n                        <td>{row.badges.map(\n                            b => <span className=\"badge\" key={b}>{b}</span>)}\n                        </td>\n                    </tr>)}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default LeaderBoardComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}