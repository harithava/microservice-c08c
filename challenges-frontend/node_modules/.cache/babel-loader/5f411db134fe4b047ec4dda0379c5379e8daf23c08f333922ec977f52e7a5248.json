{"ast":null,"code":"import _classCallCheck from\"/Users/hariharan.thavachelvam/Documents/Sandbox/workspace/My Learning/Chapter-08c/challenges-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/hariharan.thavachelvam/Documents/Sandbox/workspace/My Learning/Chapter-08c/challenges-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/hariharan.thavachelvam/Documents/Sandbox/workspace/My Learning/Chapter-08c/challenges-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/hariharan.thavachelvam/Documents/Sandbox/workspace/My Learning/Chapter-08c/challenges-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import*as React from'react';import GameApiClient from'../services/GameApiClient';import ChallengesApiClient from'../services/ChallengesApiClient';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var LeaderBoardComponent=/*#__PURE__*/function(_React$Component){_inherits(LeaderBoardComponent,_React$Component);var _super=_createSuper(LeaderBoardComponent);function LeaderBoardComponent(props){var _this;_classCallCheck(this,LeaderBoardComponent);_this=_super.call(this,props);_this.state={leaderboard:[],serverError:false};return _this;}_createClass(LeaderBoardComponent,[{key:\"componentDidMount\",value:function componentDidMount(){this.refreshLeaderBoard();// sets a timer to refresh the leaderboard every 5 seconds\nsetInterval(this.refreshLeaderBoard.bind(this),5000);}},{key:\"getLeaderBoardData\",value:function getLeaderBoardData(){return GameApiClient.leaderBoard().then(function(lbRes){if(lbRes.ok){return lbRes.json();}else{return Promise.reject(\"Gamification: error response\");}});}},{key:\"getUserAliasData\",value:function getUserAliasData(userIds){return ChallengesApiClient.getUsers(userIds).then(function(usRes){if(usRes.ok){return usRes.json();}else{return Promise.reject(\"Multiplication: error response\");}});}},{key:\"updateLeaderBoard\",value:function updateLeaderBoard(lb){this.setState({leaderboard:lb,// reset the flag\nserverError:false});}},{key:\"refreshLeaderBoard\",value:function refreshLeaderBoard(){var _this2=this;this.getLeaderBoardData().then(function(lbData){var userIds=lbData.map(function(row){return row.userId;});if(userIds.length>0){_this2.getUserAliasData(userIds).then(function(data){// build a map of id -> alias\nvar userMap=new Map();data.forEach(function(idAlias){userMap.set(idAlias.id,idAlias.alias);});// add a property to existing lb data\nlbData.forEach(function(row){return row['alias']=userMap.get(row.userId);});_this2.updateLeaderBoard(lbData);}).catch(function(reason){console.log('Error mapping user ids',reason);_this2.updateLeaderBoard(lbData);});}}).catch(function(reason){_this2.setState({serverError:true});console.log('Gamification server error',reason);});}},{key:\"render\",value:function render(){if(this.state.serverError){return/*#__PURE__*/_jsx(\"div\",{children:\"We're sorry, but we can't display game statistics at this moment.\"});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Leaderboard\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"User\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Score\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Badges\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:this.state.leaderboard.map(function(row){return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:row.alias?row.alias:row.userId}),/*#__PURE__*/_jsx(\"td\",{children:row.totalScore}),/*#__PURE__*/_jsx(\"td\",{children:row.badges.map(function(b){return/*#__PURE__*/_jsx(\"span\",{className:\"badge\",children:b},b);})})]},row.userId);})})]})]});}}]);return LeaderBoardComponent;}(React.Component);export default LeaderBoardComponent;","map":{"version":3,"names":["React","GameApiClient","ChallengesApiClient","jsx","_jsx","jsxs","_jsxs","LeaderBoardComponent","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","leaderboard","serverError","_createClass","key","value","componentDidMount","refreshLeaderBoard","setInterval","bind","getLeaderBoardData","leaderBoard","then","lbRes","ok","json","Promise","reject","getUserAliasData","userIds","getUsers","usRes","updateLeaderBoard","lb","setState","_this2","lbData","map","row","userId","length","data","userMap","Map","forEach","idAlias","set","id","alias","get","catch","reason","console","log","render","children","totalScore","badges","b","className","Component"],"sources":["/Users/hariharan.thavachelvam/Documents/Sandbox/workspace/My Learning/Chapter-08c/challenges-frontend/src/components/LeaderBoardComponent.js"],"sourcesContent":["import * as React from 'react';\nimport GameApiClient from '../services/GameApiClient';\nimport ChallengesApiClient from '../services/ChallengesApiClient';\n\nclass LeaderBoardComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            leaderboard: [],\n            serverError: false\n        }\n    }\n\n    componentDidMount() {\n        this.refreshLeaderBoard();\n        // sets a timer to refresh the leaderboard every 5 seconds\n        setInterval(this.refreshLeaderBoard.bind(this), 5000);\n    }\n\n    getLeaderBoardData(): Promise {\n        return GameApiClient.leaderBoard().then(\n            lbRes => {\n                if (lbRes.ok) {\n                    return lbRes.json();\n                } else {\n                    return Promise.reject(\"Gamification: error response\");\n                }\n            }\n        );\n    }\n\n    getUserAliasData(userIds: number[]): Promise {\n        return ChallengesApiClient.getUsers(userIds).then(\n            usRes => {\n                if(usRes.ok) {\n                    return usRes.json();\n                } else {\n                    return Promise.reject(\"Multiplication: error response\");\n                }\n            }\n        )\n    }\n\n    updateLeaderBoard(lb) {\n        this.setState({\n            leaderboard: lb,\n            // reset the flag\n            serverError: false\n        });\n    }\n\n    refreshLeaderBoard() {\n        this.getLeaderBoardData().then(\n            lbData => {\n                let userIds = lbData.map(row => row.userId);\n                if(userIds.length > 0) {\n                    this.getUserAliasData(userIds).then(data => {\n                        // build a map of id -> alias\n                        let userMap = new Map();\n                        data.forEach(idAlias => {\n                            userMap.set(idAlias.id, idAlias.alias);\n                        });\n                        // add a property to existing lb data\n                        lbData.forEach(row =>\n                            row['alias'] = userMap.get(row.userId)\n                        );\n                        this.updateLeaderBoard(lbData);\n                    }).catch(reason => {\n                        console.log('Error mapping user ids', reason);\n                        this.updateLeaderBoard(lbData);\n                    });\n                }\n            }\n        ).catch(reason => {\n            this.setState({ serverError: true });\n            console.log('Gamification server error', reason);\n        });\n    }\n\n    render() {\n        if (this.state.serverError) {\n            return (\n                <div>We're sorry, but we can't display game statistics at this\n                    moment.</div>\n            );\n        }\n        return (\n            <div>\n                <h3>Leaderboard</h3>\n                <table>\n                    <thead>\n                    <tr>\n                        <th>User</th>\n                        <th>Score</th>\n                        <th>Badges</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.state.leaderboard.map(row => <tr key={row.userId}>\n                        <td>{row.alias ? row.alias : row.userId}</td>\n                        <td>{row.totalScore}</td>\n                        <td>{row.badges.map(\n                            b => <span className=\"badge\" key={b}>{b}</span>)}\n                        </td>\n                    </tr>)}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default LeaderBoardComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}